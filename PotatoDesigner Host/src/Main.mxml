<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   fontSize="16" fontFamily="微软雅黑"
					   applicationComplete="applicationCompleteHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import potato.designer.framework.DataCenter;
			import potato.designer.framework.DesignerEvent;
			import potato.designer.framework.EventCenter;
			import potato.designer.framework.PluginInfo;
			import potato.designer.framework.PluginManager;
			import potato.designer.plugin.window.ViewWindow;
			import potato.designer.plugin.window.WindowManager;
			
			import spark.components.Window;
			
			protected function applicationCompleteHandler(event:FlexEvent):void
			{	
				//检测内置工作空间
				var readOnlyDefaultWorkSpace:File = File.applicationDirectory.resolvePath("designer/defaultWorkSpace");
				if(readOnlyDefaultWorkSpace.exists)
				{
					var defaultWorkSpace:File = File.applicationStorageDirectory.resolvePath("designer/defaultWorkSpace");
					if(!defaultWorkSpace.exists)
					{
						//初次安装，拷贝内置工作空间到应用存储目录，然后添加此工作空间到工作空间列表
						readOnlyDefaultWorkSpace.copyTo(defaultWorkSpace);
						
						var data:Object = {array:[defaultWorkSpace.nativePath], isDefault:false};
						var jStr:String = JSON.stringify(data);
						var file:File = File.applicationStorageDirectory.resolvePath("history.json");
						var fileStream:FileStream = new FileStream();
						fileStream.open(file, FileMode.WRITE);
						fileStream.writeMultiByte(jStr, File.systemCharset);
						fileStream.close();
					}
				}
				
				EventCenter.addEventListener(DataCenter.EVENT_LOADED, loadedHandler);
				var selectWorkSpaceDialog:SelectWorkSpaceDialog = new SelectWorkSpaceDialog;
				selectWorkSpaceDialog.open(true);
				
				//与核心插件Window配合。引入Window项目时必须使用"合并到代码"
				EventCenter.addEventListener(WindowManager.OPEN_WINDOW, openWindowHandler);
			}
			
			protected function loadedHandler(e:Event):void
			{
				EventCenter.addEventListener(PluginManager.EVENT_PLUGIN_INSTALLED, pluginInstalledHandler);
				PluginManager.scan();
			}
			
			protected function openWindowHandler(e:DesignerEvent):void
			{
				var window:Window = e.data;
				//将新建Window的内嵌继承样式设为Application自身的样式。
				window.styleDeclaration = styleDeclaration;
				window.open();
			}
			
			protected function pluginInstalledHandler(e:DesignerEvent):void
			{
				var pluginInfo:PluginInfo = e.data;
				PluginManager.startPlugin(pluginInfo.id);
			}
			
		]]>
	</fx:Script>
</s:Application>
