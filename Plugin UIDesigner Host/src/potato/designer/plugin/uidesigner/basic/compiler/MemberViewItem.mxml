<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="true" click="editHandler(event)"
				dataChange="dataChangeHandler(event)" fontSize="16">
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle"/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import flash.filesystem.File;
			
			import flashx.textLayout.conversion.ITextImporter;
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.events.FlexEvent;
			
			import potato.designer.plugin.uidesigner.UIDesignerHost;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.AccessorProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.IMemberProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.MethodProfile;
			import potato.designer.plugin.uidesigner.basic.interpreter.BasicTargetProfile;
			
			import spark.events.TextOperationEvent;
			
			/**类型描述：变量和存取器*/
			protected var access:AccessorProfile;
			/**类型描述：方法*/
			protected var method:MethodProfile;
			/**已有参数。如果是未启用的成员，则此值为空*/
			protected var params:Vector.<Object>;
			/**编辑参数。由于可以指定"undefined"（表示尚未配置该值），所以使用Object类型。*/
			protected var editParams:Vector.<Object>;
			/**编辑点。指示当前正在编辑哪个参数。为-1说明未启用编辑器。*/
			protected var editPoint:int = -1;
			protected var changed:Boolean;
			
			/**指示目前编辑功能是否可用*/
			public function get currentEditAvailable():Boolean
			{
				return (access || method) && -1 != editPoint;
			}
			
			/**指示代表的对象是变量/存取器，还是方法。变量/存取器返回true，方法返回false。*/
			public function get isAccess():Boolean
			{
				return null != access;
			}
			
			/**正在编辑的参数值*/
			public function get currentValue():String
			{
				if(-1 == editPoint)
				{
					throw new Error("尝试在不处于编辑状态时访问此方法");
				}
				return editParams[editPoint] as String;
			}
			
			/**正在编辑的参数值*/
			public function set currentValue(value:String):void
			{
				if(-1 == editPoint)
				{
					throw new Error("尝试在不处于编辑状态时访问此方法");
				}
				editParams[editPoint] = value;
				changed = true;
			}
			
			/**正在编辑的参数值*/
			public function get currentType():String
			{
				if(-1 == editPoint)
				{
					throw new Error("尝试在不处于编辑状态时访问此方法");
				}
				return access ? access.type : method.parameters[editPoint].type;
			}
			
			protected function input_changeHandler(event:TextOperationEvent):void
			{
				//不知为什么，字符串的第一个字符有可能为一个值为0的字符。这会导致一系列问题。这段代码删除此0字符。
				var text:String = input.text;
				if(0 == text.charCodeAt(0))
					text = text.slice(1);
				
				editParams[editPoint] = text;
			}
			
			protected function input_keyDownHandler(event:KeyboardEvent):void
			{
				if(-1 == editPoint)
					return;
				
				changed = true;
				
				switch(event.keyCode)
				{
					//上一个参数
					case Keyboard.LEFT:
						if(0 == input.selectionAnchorPosition && 0 == input.selectionActivePosition)
						{
							event.preventDefault();
							previous();
						}
						break;
					
					//下一个参数
					case Keyboard.RIGHT:
						var lastIndex:int = input.text.length;
						if(lastIndex == input.selectionAnchorPosition && lastIndex == input.selectionActivePosition)
						{
							event.preventDefault();
							next();
						}
						break;
					
					//下一个参数
					case Keyboard.TAB:
						event.preventDefault();
						if(event.ctrlKey)//ctrl+tab真的是插入tab
						{
							input.insertText("\t");
						}
						else if(!event.shiftKey)
						{
							next();
						}
						else
						{
							previous();
						}
						break;
					
					//完成输入或者输入回车
					case Keyboard.ENTER:
						if(event.shiftKey)//shift + enter 是输入换行符
						{
							input.insertText(File.lineEnding);
						}
						else
						{
							event.preventDefault();
							apply();
						}
						break;
					
					//输入null
					case Keyboard.DELETE:
					case Keyboard.BACKSPACE:
						if(0 == input.text.length)
						{
							editParams[editPoint] = null;
							setInput();
							event.preventDefault();
						}
						break;
					
					case Keyboard.LEFT:
						break;
					
					default:
						if(null == editParams[editPoint])
						{
							event.preventDefault();
							editParams[editPoint] = "";
							setInput();
							input.appendText(String.fromCharCode(event.charCode));
						}
					
				}
			}
			
			protected function input_focusOutHandler(e:Event):void
			{
				apply();
				editPoint = -1;
				redraw();
			}
			
			
			/**点击时显示编辑文本框*/
			protected function editHandler(event:MouseEvent):void
			{
				if(-1 != editPoint)
					return;
				
				if(method && !method.numParameter)//如果是无参方法，则立即启用，不显示编辑框
				{
					apply();
					return;
				}
				editPoint = 0;
				redraw();
				input.setFocus();
			}
			
			
			protected function dataChangeHandler(event:FlexEvent):void
			{
				if(!data)
					return;
				
				access = data[1] as AccessorProfile;
				method = data[1] as MethodProfile;
				params = data[2];
				editParams = params ? params.concat() : new Vector.<Object>;
				editParams.length = access ? 1 : method.numParameter;
				editPoint = -1;
				
				redraw();
				
				contextMenu = new ContextMenu;
				var item:ContextMenuItem;
				
				if(params)
				{
					item = new ContextMenuItem("删除");
					item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, deleteHandler);
					contextMenu.addItem(item);
				}
				
			}
			
			protected function deleteHandler(event:ContextMenuEvent):void
			{
				//TODO
			}

			/**重绘*/
			protected function redraw():void
			{
				if(!data)
					return;
				
				var str:String;
				
				if(-1 == editPoint)//未处于编辑模式
				{
					if(access)
					{
						if(params)
						{
							str = formatStr("{0}:{1} = {2}", access.name, access.type, html(params[0]));
						}
						else
						{
							str = formatStr("{0}:{1}", access.name, access.type);
						}
					}
					else
					{
						str = method.name + "(";
						for(var i:int = 0; i <method.parameters.length; i++)
						{
							if(params && params.length > i)
							{
//								str += formatStr("{0}:{1}", html(params[i]), method.parameters[i].type);
								str += html(params[i]);
							}
							else
							{
								str += "?:" + method.parameters[i].type;
							}
							
							if(i < method.parameters.length - 1)
							{
								str += ", ";
							}
						}
						str += ")";
					}
					
					setHtml(before_label, str);
					input.parent && removeElement(input);
					after_label.parent && removeElement(after_label);
				}
				else//编辑模式
				{					
					//如果字符串包含换行符，则将编辑框设定为多行模式
					str = editParams[editPoint] as String;
					input.multiline = str && (-1 != str.indexOf("\r") || -1 != str.indexOf("\n"));
					
					if(access)
					{
						before_label.text = formatStr("{0}:{1} = ", access.name, access.type);
						setInput();
						after_label.text = "";
					}
					else
					{
						str = method.name + "(";
						for(i = 0; i <method.parameters.length; i++)
						{
							
							if(i == editPoint)
							{
								setHtml(before_label, str);
								str = "";
								setInput();
							}
							else
							{
								if(params && params.length > i)
								{
//									str += formatStr("{0}:{1}", html(editParams[i]), method.parameters[i].type);
									str += html(params[i]);
								}
								else
								{
									str += "?:" + method.parameters[i].type;
								}
							}
							
							if(i < method.parameters.length - 1)
							{
								str += ", ";
							}
						}
						str += ")";
						setHtml(after_label, str);
					}
					
					input.parent || addElement(input);
					input.selectAll();
					after_label.parent || addElement(after_label);
					var picker:ITypePicker = BasicCompiler.getTypePicker(currentType);
					picker && picker.show(this);
				}
				
//				commitProperties();
//				input.parent && input.getFocus();
				
				function html(param:String):String
				{
					if(null == param)
						return "<b>null</b>";
					else
						return formatStr('"<b>{0}</b>"', param);
				}
				
				var textImporter:ITextImporter;
				/**为RichText设置HTML表示的带格式文本*/
				function setHtml(richText:RichText, html:String):void
				{
					textImporter ||= TextConverter.getImporter(TextConverter.TEXT_FIELD_HTML_FORMAT);
					richText.textFlow = textImporter.importToFlow(html);
				}
			}
			
			
			protected function setInput():void
			{
				var str:String = editParams[editPoint] as String;
				input.text = str;
				input.setStyle("backgroundColor", null == str ? 0xff0000 : 0xffffff);
//				input.setStyle("color", null == str ? 0xff0000 : 0);
			}
			
			/**应用输入的值*/
			protected function apply():void
			{
				if(!data)
					return;
				
				if(!changed)
					return;
				changed = false;
				
				//检测输入有效性。
				for (var i:int = 0; i < editParams.length; i++) 
				{
					if(undefined === editParams[i])
					{
						if(i + 1 < (access ? 1 : method.numParameterMin))
						{
							logf("[UIDesigner] 参数数量不足：指定了{0}个，但需要{1}个。", i + 1, access ? 1 : method.numParameterMin);
							return;
						}
						editParams.length = i + 1;
						break;
					}
				}
				
				trace("应用!", editParams, "到", params)
				
				var tp:BasicTargetProfile = data[0];
				if(params)
				{
					var index:int = tp.membersParam.indexOf(params);
					if(-1 == index)//构造方法
					{
						tp.constructorParam = editParams;
					}
					else
					{
						tp.membersParam[index] = editParams;
					}
				}
				else
				{
					tp.membersName.push((data[1] as IMemberProfile).name);
					tp.membersParam.push(editParams);
				}
				
				UIDesignerHost.update();
				
			}
			
			
			/**导航至下一个参数*/
			protected function next():void
			{
				if(access)
				{
					editPoint = 0;
				}
				else 
				{
					editPoint ++;
					if(editPoint >= method.numParameter)
					{
						editPoint = 0;
					}
				}
				redraw();
			}
			
			/**导航至上一个参数*/
			protected function previous():void
			{
				if(access)
				{
					editPoint = 0;
				}
				else
				{
					editPoint --;
					if(editPoint < 0)
					{
						editPoint = method.numParameter -1;
					}
				}
				redraw();
			}
			
		]]>
	</fx:Script>
	
	<s:RichText id="before_label" height="20" text="function(" verticalAlign="top"/>
	<s:RichEditableText id="input" width="100"
						change="input_changeHandler(event)"
						focusOut="input_focusOutHandler(event)"
						keyDown="input_keyDownHandler(event)"/>
	<s:RichText id="after_label" height="20" text=" )"/>
	
</s:ItemRenderer>
