<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="640" height="400"
		  initialize="initializeHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import potato.designer.net.Message;
			import potato.designer.plugin.guestManager.Guest;
			import potato.designer.plugin.guestManager.GuestManagerHost;
			import potato.designer.plugin.uidesigner.DesignerConst;
			import potato.designer.plugin.uidesigner.UIDesignerHost;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.ClassProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.IMemberProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.Suggest;
			
			import spark.components.Window;
			import spark.events.TextOperationEvent;
			
			protected var timer:Timer;
			protected var members:ArrayList;
			
			protected var _classProfile:ClassProfile;
			
			
			
			protected function showInfo(info:String):void
			{
				addElement(info_label);
				edit_group.parent && removeElement(edit_group);
				height = 80;
				
				info_label.text = info;
				
				members.removeAll();
			}
			
			
			
			protected function showEdit():void
			{
				addElement(edit_group);
				info_label.parent && removeElement(info_label);
				height = 480;
			}
			
			protected function showInfoAndEdit(info:String):void
			{
				addElement(info_label);
				addElement(edit_group);
				height = 480;
				
				info_label.text = info;
			}
			
			
			internal var window:Window;
			
			protected function initializeHandler(event:FlexEvent):void
			{
				members = new ArrayList;
				member_list.dataProvider = members;
			}
			
			protected function className_input_changeHandler(event:TextOperationEvent):void
			{
				if(!timer)
				{
					timer = new Timer(1000, 1);
				}
				
				timer.addEventListener(TimerEvent.TIMER, timerHandler);
				timer.reset();
				timer.start();
			}
			
			protected function timerHandler(event:TimerEvent):void
			{
				var guest:Guest = GuestManagerHost.activatedGuest;
				if(!guest)
				{
					showInfo("无法连接到客户端");
					return;
				}
				
				var className:String = className_input.text;
				//形如core.display::Quad的类名才能获取，类路径和类名之间由双冒号分隔
				if(className.split(".").length > 1 && className.split("::").length == 1)
				{
					var array:Array = className.split(".");
					className = "::" + array.pop();
					className = array.join(".") + className;
				}
				
				guest.send(DesignerConst.S2C_REQ_DESCRIBE_TYPE, className, describeTypeAnswerHandler);
				
			}
			
			private function describeTypeAnswerHandler(msg:Message):void
			{
				try
				{
					_classProfile = new ClassProfile(msg.data);
				} 
				catch(error:Error) 
				{
					showInfo("请输入有效的类名");
					return;
				}
				
				Suggest.applySuggest(_classProfile);
				
				members.removeAll();
				_classProfile.constructor && members.addItem(_classProfile.constructor);
				for each(var i:IMemberProfile in _classProfile.accessors)
				{
					members.addItem(i);
				}
				for each(i in _classProfile.methods)
				{
					members.addItem(i);
				}
				
				showEdit();
				
			}
			
			protected function ok_btn_clickHandler(event:MouseEvent):void
			{
				if(_classProfile)
				{
					if(_classProfile.constructor && !_classProfile.constructor.availability)
					{
						showInfoAndEdit("必须具有有效的构造方法");
						return;
					}
					
					BasicCompiler.regClass(DesignerConst.getShortClassName(_classProfile.className), _classProfile);
				}

				window.close();
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
		<s:TextInput id="className_input" width="100%" change="className_input_changeHandler(event)"
					 prompt="输入类的完全限定名"/>
		<s:Label id="info_label" width="100%" text="这里显示一些信息" textAlign="right"/>
		<s:VGroup id="edit_group" width="100%" height="100%">
			<s:List id="member_list" width="100%" height="100%"
					itemRenderer="potato.designer.plugin.uidesigner.basic.compiler.ClassTypeEditorItem"></s:List>
			<s:HGroup width="100%">
				<s:Button id="showAll_btn" label="显示全部成员"/>
				<s:Group width="100%">
				</s:Group>
				<s:Button id="ok_btn" label="好" click="ok_btn_clickHandler(event)"/>
			</s:HGroup>
		</s:VGroup>
</s:Group>
