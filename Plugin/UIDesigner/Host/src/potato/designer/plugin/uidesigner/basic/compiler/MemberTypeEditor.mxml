<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true" fontSize="16"
				dataChange="dataChangeHandler(event)"
				click="clickHandler(event)">
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle"/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.AccessorProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.IMemberProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.MethodProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.ParameterProfile;
			
			import spark.events.TextOperationEvent;
			
			/**编辑点。指示当前正在编辑哪个参数。为-1说明未启用编辑器。*/
			protected var editPoint:int = -1;
			
			protected function input_changeHandler(event:TextOperationEvent):void
			{
				testType();
			}
			
			protected function testType():void
			{
				var access:AccessorProfile = data as AccessorProfile;
				var method:MethodProfile = data as MethodProfile;
				if(BasicCompiler.getClassNameByType(type_input.text))
				{
					type_input.setStyle("contentBackgroundColor", 0xffffff);
					if(access)
					{
						access.type = type_input.text;
					}
					else
					{
						method.parameters[editPoint].type = type_input.text;
					}
				}
				else
				{
					type_input.setStyle("contentBackgroundColor", 0xB62222);
					if(access)
					{
						access.type = null;
					}
					else
					{
						method.parameters[editPoint].type = null;
					}
				}
			}
			
			protected function dataChangeHandler(event:FlexEvent):void
			{
				editPoint = -1;
				inUse_check.selected = IMemberProfile(data).enable;
				redraw();
			}
			
			
			protected static const TYPE_ALL:String = "all";
			protected static const TYPE_BEGIN:String = "begin";
			protected static const TYPE_END:String = "end";
			
			/**重绘*/
			protected function redraw(type:String = null):void
			{
				var access:AccessorProfile = data as AccessorProfile;
				var method:MethodProfile;
				if(access)
				{
					if(-1 == editPoint)
					{
						before_label.text = access.name + ":" + (access.type || "?");
						
					}
					else
					{
						before_label.text = access.name + ":";
						type_input.text = access.type || "?";
					}
					after_label.text = "";
				}
				else
				{
					method = data as MethodProfile;
					var paras:Vector.<ParameterProfile> = method.parameters;
					var text:String = method.name + "(";
					for(var i:int = 0; i <paras.length; i++)
					{
						if(i == editPoint)
						{
							before_label.text = text;
							text = "";
							type_input.text = paras[i].type || "?";
						}
						else
						{
							text += (paras[i].type || "?");
							if(i < paras.length - 1)
							{
								text += ", ";
							}
						}
					}
					text += ")";
					if(-1 == editPoint)
					{
						before_label.text = text;
					}
					else
					{
						after_label.text = text;
					}
				}
				
				if(-1 == editPoint)
				{
					type_input.parent && removeElement(type_input);
					after_label.parent && removeElement(after_label);
				}
				else
				{
					addElement(type_input);
					switch(type)
					{
						case TYPE_ALL:
							type_input.selectAll();
							break;
					}
					addElement(after_label);
				}
				
			}
			
			/**导航至下一个参数*/
			protected function next():void
			{
				if(data is AccessorProfile)
				{
					editPoint = 0;
				}
				else 
				{
					editPoint ++;
					if(editPoint >= MethodProfile(data).numParameter)
					{
						editPoint = 0;
					}
				}
				redraw(TYPE_ALL);
			}
			
			/**导航至上一个参数*/
			protected function previous():void
			{
				if(data is AccessorProfile)
				{
					editPoint = 0;
				}
				else
				{
					editPoint --;
					if(editPoint < 0)
					{
						editPoint = MethodProfile(data).numParameter -1;
					}
				}
				redraw(TYPE_ALL);
			}
			
			protected function inputOverHandler():void
			{
				editPoint = -1;
				redraw();
			}
			
			/**点击时显示编辑文本框*/
			protected function clickHandler(event:MouseEvent):void
			{
				if(data is AccessorProfile || (data as MethodProfile).numParameter)
				{
					editPoint = 0;
					redraw(TYPE_ALL);
					type_input.setFocus();
				}
				
			}
			
			protected function input_keyDownHandler(event:KeyboardEvent):void
			{
				
				if(Keyboard.COMMA == event.keyCode || (Keyboard.TAB == event.keyCode && event.shiftKey))
				{
					previous();
				}
				else if(Keyboard.TAB == event.keyCode && !event.shiftKey)
				{
					next();
				}
				
			}
			
			protected function inUse_check_clickHandler(event:MouseEvent):void
			{
				IMemberProfile(data).enable = inUse_check.selected;
			}
			
		]]>
	</fx:Script>
	<s:CheckBox id="inUse_check" click="inUse_check_clickHandler(event)"/>
	<s:Label id="before_label" text="function("/>
	<s:TextInput id="type_input" text="type"
				 change="input_changeHandler(event)" keyDown="input_keyDownHandler(event)" focusOut="inputOverHandler()"/>
	<s:Label id="after_label" text=" )"/>
	
</s:ItemRenderer>
