<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="300" height="400" initialize="initializeHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import potato.designer.framework.DesignerEvent;
			import potato.designer.framework.EventCenter;
			import potato.designer.plugin.uidesigner.CompilerProfile;
			import potato.designer.plugin.uidesigner.DesignerConst;
			import potato.designer.plugin.uidesigner.UIDesignerHost;
			import potato.designer.plugin.uidesigner.ViewController;
			
			protected var _rootXml:XML;
			
			protected function initializeHandler(event:FlexEvent):void
			{
				EventCenter.addEventListener(DesignerConst.FOLD_FOCUS_CHANGED, focusChangedHandler);
				EventCenter.addEventListener(DesignerConst.UPDATE, updateHandler);
				
				EventCenter.addEventListener(DesignerConst.OUTLINE_ITEM_CLICK, outlineItemClickHandler);
				EventCenter.addEventListener(DesignerConst.OUTLINE_ITEM_DOUBLE_CLICK, outlineItemDoubleClickHandler);
			}
			
			protected function outlineItemClickHandler(event:DesignerEvent):void
			{
				var path:Vector.<uint> = (event.data as CompilerProfile).path;
				log("点击了", path);
				var index:int = path.pop();
				ViewController.setFoldAndFocus(path, index);
			}
			
			protected function outlineItemDoubleClickHandler(event:DesignerEvent):void
			{
				var path:Vector.<uint> = (event.data as CompilerProfile).path;
				log("双击了", path);
				ViewController.setFoldAndFocus(path, -1);
			}
			
			public function focusChangedHandler(event:DesignerEvent):void
			{
				var cp:CompilerProfile = UIDesignerHost.rootCompilerProfile;
				if(!cp)
					return;
				
				var fold:Vector.<uint> = ViewController.foldPath;
				if(fold.length)
				{
					fold.shift();
					openFold(cp, fold);
				}
				else
				{
					openFold(cp, null);
				}
				
				tree.validateNow();
				tree.selectedItem = UIDesignerHost.getCompilerProfileByPath(ViewController.foldPath);
			}
			
			/**
			 * 遍历CP树以打开和关闭分支
			 * @param fold 展开树。展开树为null时，cp关闭，否则展开。
			 */
			protected function openFold(cp:CompilerProfile, fold:Vector.<uint>):void
			{
				tree.expandItem(cp, null != fold);
				var index:int = fold && fold.length ? fold.shift() : -1;
				for (var i:int = 0; i < cp.childrenVector.length; i++) 
				{
					openFold(cp.childrenVector[i], index == i ? fold : null);
				}
				
			}
			
			protected function updateHandler(event:DesignerEvent):void
			{
				if(UIDesignerHost.rootCompilerProfile)
				{
					tree.dataProvider = UIDesignerHost.rootCompilerProfile;
					tree.validateNow();
					focusChangedHandler(event);
				}
				else
				{
					tree.dataProvider = null;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Label text="大纲视图"/>
	<mx:Tree id="tree" width="100%" height="100%" itemRenderer="potato.designer.plugin.uidesigner.view.OutlineViewItem" ></mx:Tree>
</s:Group>
