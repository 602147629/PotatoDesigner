<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true" fontSize="16"
				dataChange="dataChangeHandler(event)"
				click="clickHandler(event)"
				creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle"/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.AccessorProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.IMemberProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.ITypeValue;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.MethodProfile;
			import potato.designer.plugin.uidesigner.basic.compiler.classdescribe.ParameterProfile;
			
			import spark.events.TextOperationEvent;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				type_combo.openButton.width = 0;
				type_combo.openButton.visible = false;
				type_combo.textInput.addEventListener(TextOperationEvent.CHANGE, input_changeHandler);
				type_combo.textInput.addEventListener(KeyboardEvent.KEY_DOWN, input_keyDownHandler);
				type_combo.textInput.addEventListener(FocusEvent.FOCUS_OUT, inputOverHandler);
				type_combo.dataProvider = new ArrayList;
			}
			
			protected function input_changeHandler(event:TextOperationEvent):void
			{
				testOrApply(true);
			}
			
			protected function input_keyDownHandler(event:KeyboardEvent):void
			{
				if(Keyboard.LEFT == event.keyCode)
				{
					if(0 == type_combo.textInput.selectionAnchorPosition && 0 == type_combo.textInput.selectionActivePosition)
					{
						testOrApply(false);
						previous();
					}
				}
				else if(Keyboard.RIGHT == event.keyCode)
				{
					var lastIndex:int = type_combo.textInput.text.length;
					if(lastIndex == type_combo.textInput.selectionAnchorPosition && lastIndex == type_combo.textInput.selectionActivePosition)
					{
						testOrApply(false);
						next();
					}
				}
			}
			
			protected function inputOverHandler(e:Event):void
			{
				testOrApply(false);
				editPoint = -1;
				redraw();
			}
			
			/**编辑点。指示当前正在编辑哪个参数。为-1说明未启用编辑器。*/
			protected var editPoint:int = -1;
			
			protected function dataChangeHandler(event:FlexEvent):void
			{
				editPoint = -1;
				inUse_check.selected = IMemberProfile(data).enable;
				redraw();
				
			}
			
			
			protected static const TYPE_ALL:String = "all";
			protected static const TYPE_BEGIN:String = "begin";
			protected static const TYPE_END:String = "end";
			
			/**重绘*/
			protected function redraw(type:String = null):void
			{
				var access:AccessorProfile = data as AccessorProfile;
				var method:MethodProfile;
				if(access)
				{
					if(-1 == editPoint)
					{
						before_label.text = access.name + ":" + (access.type || "?");
						
					}
					else
					{
						before_label.text = access.name + ":";
						setTypeCombo(access);
					}
					after_label.text = "";
				}
				else
				{
					method = data as MethodProfile;
					var paras:Vector.<ParameterProfile> = method.parameters;
					var text:String = method.name + "(";
					for(var i:int = 0; i <paras.length; i++)
					{
						if(i == editPoint)
						{
							before_label.text = text;
							text = "";
							setTypeCombo(paras[i]);
						}
						else
						{
							text += (paras[i].type || "?");
							if(i < paras.length - 1)
							{
								text += ", ";
							}
						}
					}
					text += ")";
					if(-1 == editPoint)
					{
						before_label.text = text;
					}
					else
					{
						after_label.text = text;
					}
				}
				
				if(-1 == editPoint)
				{
					type_combo.parent && removeElement(type_combo);
					after_label.parent && removeElement(after_label);
				}
				else
				{
					addElement(type_combo);
					switch(type)
					{
						case TYPE_ALL:
							type_combo.textInput.selectAll();
							break;
					}
					addElement(after_label);
				}
				
				function setTypeCombo(typeValue:ITypeValue):void
				{
					var inputText:String = typeValue.type || "?";
					type_combo.textInput.setStyle("contentBackgroundColor", typeValue.type ? 0xFFFFFF : 0xB62222);
					type_combo.dataProvider.removeAll();
					for each(var s:String in BasicCompiler.getParamTypesByClassName(typeValue.className))
					{
						type_combo.dataProvider.addItem(s);
					}
					if(typeValue.type && typeValue.hasDefaultValue)
					{
						inputText += " = " + typeValue.defaultValue;
					}
					type_combo.textInput.text = inputText;
				}
				
			}
			
			/**应用输入的type和默认值*/
			protected function testOrApply(isTest:Boolean):void
			{	
				var arr:Array = type_combo.textInput.text.split("=");
				var type:String = arr.shift();
				type = StringUtil.trim(type);
				
				if(!BasicCompiler.getClassNameByParamType(type))
				{
					if(isTest)
					{
						type_combo.textInput.setStyle("contentBackgroundColor", 0xB62222);
					}
					else
					{
						logf("指定的类型[{0}]不存在。", type);
					}
					return;
				}
				
				if(isTest)
				{
					type_combo.textInput.setStyle("contentBackgroundColor", 0xFFFFFF);
					return;
				}

				if(data is AccessorProfile)
				{
					var access:AccessorProfile = data as AccessorProfile;
					access.type = type;
				}
				else
				{
					var method:MethodProfile = data as MethodProfile;
					method.parameters[editPoint].type = type;
				}
				
				if(arr.length)
				{
					var defaultValue:String = arr.join("=");
					defaultValue = StringUtil.trim(defaultValue);
					if(defaultValue.length >= 2 && defaultValue.charAt(0) == "'" && defaultValue.charAt(defaultValue.length - 1) == "'")
					{
						defaultValue = defaultValue.slice(1, length - 1);
					}
					else if(defaultValue.length >= 2 && defaultValue.charAt(0) == "\"" && defaultValue.charAt(defaultValue.length - 1) == "\"")
					{
						defaultValue = defaultValue.slice(1, length - 1);
					}
					
					if(access)
					{
						access.defaultValue = defaultValue;
					}
					else
					{
						method.parameters[editPoint].defaultValue = defaultValue;
					}
				}
				else
				{
					method.parameters[editPoint].deleteDefaultValue();
				}
				
			}
			
			
			/**导航至下一个参数*/
			protected function next():void
			{
				if(data is AccessorProfile)
				{
					editPoint = 0;
				}
				else 
				{
					editPoint ++;
					if(editPoint >= MethodProfile(data).numParameter)
					{
						editPoint = 0;
					}
				}
				redraw(TYPE_ALL);
			}
			
			/**导航至上一个参数*/
			protected function previous():void
			{
				if(data is AccessorProfile)
				{
					editPoint = 0;
				}
				else
				{
					editPoint --;
					if(editPoint < 0)
					{
						editPoint = MethodProfile(data).numParameter -1;
					}
				}
				redraw(TYPE_ALL);
			}
			
			/**点击时显示编辑文本框*/
			protected function clickHandler(event:MouseEvent):void
			{
				if(data is AccessorProfile || (data as MethodProfile).numParameter)
				{
					editPoint = 0;
					redraw(TYPE_ALL);
					type_combo.textInput.setFocus();
				}
				
			}
			
			protected function inUse_check_clickHandler(event:MouseEvent):void
			{
				IMemberProfile(data).enable = inUse_check.selected;
			}
			
		]]>
	</fx:Script>
	<s:CheckBox id="inUse_check" click="inUse_check_clickHandler(event)"/>
	<s:Label id="before_label" text="function("/>
	<s:ComboBox id="type_combo">
		
	</s:ComboBox>
	<s:Label id="after_label" text=" )"/>
	
</s:ItemRenderer>
